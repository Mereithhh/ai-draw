/* eslint-disable @next/next/no-img-element */
"use client";
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/ualGb4qmJo5
 */
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { fetchDraw } from "@/lib/api";
import { ReloadIcon } from "@radix-ui/react-icons";
import { useEffect, useRef, useState } from "react";
import { Badge } from "@/components/ui/badge";
import { PhotoProvider, PhotoView } from "react-photo-view";
import "react-photo-view/dist/react-photo-view.css";
import { ComboboxDemo } from "@/components/select";
import { Switch } from "@/components/ui/switch";
import { InfoIcon } from "lucide-react";
import {
  TooltipProvider,
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from "@/components/ui/tooltip";

export default function Home() {
  const [loading, setLoading] = useState(false);
  const [prompt, setPromptFn] = useState<string>(() => {
    if (typeof window === "undefined") return "";
    return window.localStorage.getItem("prompt") || "";
  });
  const [imgUrl, setImgUrl] = useState<string>(
    "https://generated.vusercontent.net/placeholder.svg"
  );
  const [restTime, setRestTime] = useState<number>(0);
  const [preset, setPreset] = useState<string>("");
  const [transPrompt, setTransPrompt] = useState<boolean>(false);
  const [transedPrompt, setTransedPrompt] =
    useState<string>("启用后会减慢出图速度");
  const timer = useRef<any>();
  const setPrompt = (v: string) => {
    setPromptFn(v);
    if (typeof window === "undefined") return;
    window.localStorage.setItem("prompt", v);
  };

  const getSetting = async () => {
    const res = await fetch("/api/setting", {
      method: "POST",
    });
    const { data: response } = await res.json();
    console.log("setting", response);
    const { defaultPrompt, autoTrans } = response;

    const p = window.localStorage.getItem("prompt");
    if (!!!p) {
      setPromptFn(defaultPrompt);
    } else {
      console.log("本地有缓存，不使用默认值");
    }

    setTransPrompt(autoTrans);
  };

  useEffect(() => {
    if (typeof window === "undefined") return;
    getSetting();
  }, []);

  const getRestTime = async () => {
    const res = await fetch("/api/queue", {
      method: "POST",
    });
    const { data: response } = await res.json();
    const { rest_time } = response;
    setRestTime(rest_time < 0 ? 0 : rest_time);
    // if (queue_running.length > 0) {
    // console.log(queue_running[0]);
    // }
  };

  const doTransPrompt = async () => {
    const res = await fetch("/api/trans", {
      method: "POST",
      body: JSON.stringify({
        prompt,
      }),
    });
    const json = await res.json();

    return json;
  };
  const onTransPrompt = async () => {
    setLoading(true);
    try {
      const { data, code, msg } = await doTransPrompt();
      if (code != 0) {
        alert(msg);
        setLoading(false);
        return;
      }
      console.log("手动改写", data);
      setPrompt(data);
    } catch (err) {}
    setLoading(false);
    getRestTime();
  };

  useEffect(() => {
    getRestTime();
    timer.current = setInterval(() => {
      getRestTime();
    }, 5 * 1000);
  }, []);

  useEffect(() => {
    const fn = (ev: KeyboardEvent) => {
      if (ev.key === "F5") {
        onGenerate();
      }
      // meta + enter
      if (ev.metaKey && ev.key === "Enter") {
        onGenerate();
      }
      // ctrl + enter
      if (ev.ctrlKey && ev.key === "Enter") {
        onGenerate();
      }
    };
    window.addEventListener("keydown", fn);
    return () => {
      window.removeEventListener("keydown", fn);
    };
  }, [prompt, preset, transPrompt]);

  const onGenerate = async () => {
    if (prompt === "") {
      alert("请输入描述");
      return;
    }
    setLoading(true);

    let thisPrompt = prompt;
    if (transPrompt) {
      try {
        const { data, code, msg } = await doTransPrompt();
        if (code != 0) {
          alert(msg);
          setLoading(false);
          return;
        }
        thisPrompt = data;
        console.log("自动改写", data);
        setTransedPrompt(data);
      } catch (err) {}
    }

    try {
      const {
        data: response,
        code,
        msg,
      } = await fetchDraw(thisPrompt, preset, transPrompt);
      if (code != 0) {
        alert(msg);
        setLoading(false);
        return;
      }
      const url = `/api/img?path=${response[0].filename}`;
      setImgUrl(url);
      setLoading(false);
    } catch (err) {
      setLoading(false);
      return;
    }
    getRestTime();
  };

  const onDownload = () => {
    const link = document.createElement("a");
    link.href = imgUrl;
    const timestamp = new Date().getTime();
    link.download = `generated_${timestamp}.png`;
    link.click();
  };

  const onClickHuan = async () => {
    setLoading(true);
    try {
      const res = await fetch("/api/change", {
        method: "POST",
      });
      const { data: response, code, msg } = await res.json();
      if (code != 0) {
        alert(msg);
        setLoading(false);
        return;
      }
      console.log("换一换", response);
      setPrompt(response);
    } catch (err) {}
    setLoading(false);
    getRestTime();
  };

  const onHistory = () => {};

  return (
    <PhotoProvider>
      <div
        key="1"
        className="flex flex-col h-screen bg-gray-100 dark:bg-gray-900 overflow-hidden"
      >
        <header className="flex-col sm:flex-row flex items-center justify-between p-2 sm:p-4 bg-white shadow dark:bg-gray-800 ">
          <h1
            className="sm:ml-4  my-2 sm:my-0 sm:mb-0 text-xl sm:text-2xl font-bold text-gray-900 dark:text-gray-100 cursor-pointer "
            onClick={() => {
              alert(
                "一个无聊的夜晚，做的东西，不要太认真！ 有事发邮件： cs3cx4g@gmail.com"
              );
            }}
          >
            AI 绘图
          </h1>

          <div className="flex justify-between gap-2">
            <ComboboxDemo
              value={preset}
              setValue={(v) => {
                setPreset(v);
              }}
            />

            <Button
              className="text-xs  mr-0 sm:mr-6  sm:text-base dark:text-gray-100 dark:border-gray-300"
              variant="outline"
              onClick={onDownload}
            >
              下载图片
            </Button>
            {/* <Button
              className="text-xs  mr-0 sm:mr-6 sm:text-base dark:text-gray-100 dark:border-gray-300"
              variant="outline"
              onClick={onHistory}
            >
              历史
            </Button> */}
          </div>
        </header>
        <main className="flex-1 flex flex-col p-2 sm:p-4 md:p-8 overflow-auto">
          <div className="flex-1 flex flex-col gap-2 sm:gap-4 md:gap-8">
            <div className="flex flex-col gap-1 sm:gap-2">
              <Label
                htmlFor="prompt"
                className="flex items-center justify-between text-sm md:text-base"
              >
                请输入对想要画的图片的描述
                <Badge
                  variant={"secondary"}
                  className="text-sm md:text-base"
                >{`今日剩余API次数：${restTime.toString()}`}</Badge>
              </Label>

              <Textarea
                className="resize-y min-h-[100px] max-h-[200px] overflow-auto text-base"
                placeholder="形容你要画的图片，形容词用逗号分隔"
                value={prompt}
                onChange={(e) => setPrompt(e.target.value)}
              />
              <div className="flex justify-between items-center gap-2 mt-2">
                <div className="flex items-center gap-2 border py-1 px-4 rounded-xl">
                  <div className="text-sm  text-gray-500 ">智能优化</div>
                  <Switch
                    checked={transPrompt}
                    onCheckedChange={(v) => {
                      setTransPrompt(v);
                    }}
                  />
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger>
                        <div className="p-2">
                          <InfoIcon className="h-4 w-4 text-gray-500 cursor-pointer" />
                        </div>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p className="max-w-[300px] text-overflow-wrap text-sm">
                          改写后：{transedPrompt}
                        </p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                </div>
                <div className="flex justify-end items-center gap-2 ">
                  <Button
                    size="sm"
                    variant={"outline"}
                    onClick={onClickHuan}
                    disabled={loading}
                  >
                    {loading && (
                      <ReloadIcon className="mr-2 h-4 w-4 animate-spin" />
                    )}
                    抽卡
                  </Button>
                  <Button
                    size="sm"
                    variant={"outline"}
                    onClick={onTransPrompt}
                    disabled={loading}
                  >
                    {loading && (
                      <ReloadIcon className="mr-2 h-4 w-4 animate-spin" />
                    )}
                    改写
                  </Button>

                  <Button
                    disabled={loading}
                    onClick={onGenerate}
                    accessKey="g"
                    size="sm"
                    className="  self-end text-xs sm:text-base transform transition-transform  "
                  >
                    {loading && (
                      <ReloadIcon className="mr-2 h-4 w-4 animate-spin" />
                    )}
                    生成
                    <kbd className="pointer-events-none hidden h-5 select-none items-center gap-1 rounded border px-1.5 font-mono text-[10px] font-medium opacity-100 sm:flex ml-2 text-white bg-inherit">
                      <span className="text-xs">⌘</span>Enter
                    </kbd>
                  </Button>
                </div>
              </div>
            </div>

            <div className="flex-1 flex items-start justify-center   select-none">
              <PhotoView src={imgUrl}>
                <img
                  alt="Generated Drawing"
                  className="aspect-square    rounded-lg overflow-hidden  max-w-[100%] max-h-[100%] h-[500px] object-scale-down"
                  src={imgUrl}
                  width="auto"
                  height={"auto"}
                />
              </PhotoView>
            </div>
          </div>
        </main>
        <footer className="flex items-center justify-center p-2 sm:p-4 bg-white shadow dark:bg-gray-800">
          <p className="text-xs sm:text-sm text-gray-500 dark:text-gray-400">
            © 2024 By{" "}
            <a
              href="https://github.com/Mereithhh"
              target="_blank"
              className="text-blue-400"
            >
              mereith
            </a>
            . Powered by{" "}
            <a
              className="text-blue-400"
              target="_blank"
              href="https://github.com/Mereithhh/ai-draw"
            >
              AI Draw
            </a>
          </p>
        </footer>
      </div>
    </PhotoProvider>
  );
}
